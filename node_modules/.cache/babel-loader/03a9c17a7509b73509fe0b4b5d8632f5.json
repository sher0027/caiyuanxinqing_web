{"remainingRequest":"C:\\Users\\Sher\\Desktop\\1\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Sher\\Desktop\\1\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Sher\\Desktop\\1\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Sher\\Desktop\\1\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Sher\\Desktop\\1\\src\\views\\personal\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Sher\\Desktop\\1\\src\\views\\personal\\index.vue","mtime":1637046175705},{"path":"C:\\Users\\Sher\\Desktop\\1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Sher\\Desktop\\1\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Sher\\Desktop\\1\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Sher\\Desktop\\1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Sher\\Desktop\\1\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}