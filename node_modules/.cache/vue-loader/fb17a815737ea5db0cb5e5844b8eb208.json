{"remainingRequest":"C:\\Users\\Sher\\Desktop\\1\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Sher\\Desktop\\1\\src\\views\\account\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Sher\\Desktop\\1\\src\\views\\account\\index.vue","mtime":1637045218492},{"path":"C:\\Users\\Sher\\Desktop\\1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Sher\\Desktop\\1\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Sher\\Desktop\\1\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Sher\\Desktop\\1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Sher\\Desktop\\1\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}